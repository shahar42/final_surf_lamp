SURF LAMP SYSTEM INSIGHTS REPORT
Generated: 2025-09-24T02:38:16.481467
Analysis Period: 24 hours

Raw Data Summary:
- Web Service Logs: 50 entries
- Background Service Logs: 50 entries
- Service Status: healthy
- Recent Deployments: 5
- API Requests: 2
- Processing Avg Duration: 0.0s

--------------------------------------------------------------------------------

## üè• System Health Summary

Overall, the system is mostly healthy, indicated by the "healthy" status of the web service. However, there are significant errors related to database schema and issues retrieving data for specific locations. The recent deployments haven't resolved the database issues and might have even introduced them. The limited API activity might indicate a lack of user adoption, potentially exacerbated by the errors.

## üìä Performance Analysis

*   **Low API Activity:** Only 2 Arduino requests were recorded in the last 24 hours, originating from a single unique device (4433). This represents extremely low usage of the system.
*   **Processing Performance Data Missing:** `cycle_times`, `success_rate`, and `avg_duration` are all 0 or empty, indicating a lack of data or potentially a failure to collect these metrics. This needs to be addressed immediately.
*   **Recent Deployments:** 5 deployments in 24 hours is a relatively high deployment frequency. While deployments are good for introducing new features, the errors suggest insufficient testing or broken migrations.

## üîç Notable Patterns

*   **Database Error Pattern:** The recurring error `"ERROR:data_base:Error fetching user lamp data: (psycopg2.errors.UndefinedColumn) column users.sport_type does not exist"` is a clear indication of a missing column in the `users` table of the database. This error consistently occurs at `23:08:06` and repeats.
*   **Location-Specific Data Retrieval Issues:** The warning `"No lamps found for location: Netanya, Israel"` in the background logs suggests a problem retrieving data or no data exists for that specific location. The background logs also confirm that data *is* being retrieved for Hadera.
*   **SQL Query in Logs:** The web logs show the full SQL query being executed, potentially exposing sensitive database schema information if these logs are publicly accessible.

## ‚ö†Ô∏è Issues & Recommendations

1.  **CRITICAL - Database Schema Error:**
    *   **Issue:** The `users.sport_type` column is missing from the database table, causing errors when fetching user lamp data.
    *   **Recommendation:** Immediately apply a database migration to add the `sport_type` column to the `users` table. This is a showstopper. The SQL logs show the column being requested as part of a broader select statement: `SELECT users.sport_type ...`.
    *   **Action:** Verify column type and constraints for the `sport_type` column and ensure it aligns with the application's requirements.

2.  **Database Migration & Versioning:**
    *   **Issue:** Frequent recent deployments without resolving core database errors points to issues in deployment/migration process.
    *   **Recommendation:** Implement a robust database migration strategy using a tool like Alembic (for SQLAlchemy) to manage schema changes. Ensure proper testing of migrations before deployment to production. Track deployments and migrations together to improve traceability.

3.  **Missing Location Data:**
    *   **Issue:** No lamps found for Netanya, Israel.
    *   **Recommendation:** Investigate why data for Netanya is not available. It could be a configuration issue, a problem with the weather API integration for that location, or simply no users have registered lamps for that location.
    *   **Action:** Check API endpoints for Netanya and user data to see if any lamps are configured there. Consider displaying a "No data available" message to users from Netanya, rather than causing errors.

4.  **Lack of Performance Metrics:**
    *   **Issue:** Missing data for `cycle_times`, `success_rate`, and `avg_duration`.
    *   **Recommendation:** Implement proper monitoring and logging for these metrics. This will allow for more informed performance analysis in the future.
    *   **Action:** Instrument the background service to record the time it takes to process weather data for each location and the success/failure of each API call.

5.  **Limited API Usage:**
    *   **Issue:** Only 2 Arduino requests in 24 hours.
    *   **Recommendation:** Investigate the reasons for low API usage. It could be due to the database errors, a lack of user awareness, or problems with the Arduino device connectivity.
    *   **Action:** Monitor user registration rates, Arduino device connection success rates, and gather user feedback to identify the root cause. Address any issues preventing Arduino devices from connecting and fetching data.

6.  **Log Security:**
    *   **Issue:** The logs include full SQL queries, including table and column names.
    *   **Recommendation:** Review logging practices and redact sensitive information from logs to prevent potential security breaches.

## üöÄ Optimization Opportunities

1.  **Background Service Optimization:**
    *   Since we are processing data for each location, explore parallelizing the processing of each location in the background service. This could significantly reduce the overall processing time.
    *   **Action:** Utilize multi-threading or asynchronous tasks to fetch and process data for multiple locations simultaneously.

2.  **Caching:**
    *   Implement caching mechanisms to store frequently requested surf/weather data. This will reduce the load on the database and improve response times for Arduino devices.
    *   **Action:** Consider using a caching layer like Redis or Memcached to store data retrieved from the weather APIs.

3.  **Database Query Optimization:**
    *   Analyze the SQL query in the logs and identify any potential performance bottlenecks. Ensure that appropriate indexes are in place to speed up query execution.
    *   **Action:** Use database profiling tools to identify slow queries and optimize them accordingly. Consider adding indexes to frequently queried columns.

## üìà Trends & Predictions

*   **Unresolved Database Errors Lead to System Degradation:** If the database schema error is not addressed immediately, it will continue to cause errors and potentially prevent users from accessing the surf data. This will likely lead to further decline in API usage.
*   **Growing Inconsistencies:** If the database column remains absent, new users will have incomplete profiles, while existing users will experience broken functionality. The longer the database is out of sync with the application, the more difficult it will be to resolve.
*   **Potential for API Downtime:** The web service is currently running on a single instance. As the system grows and API usage increases, this could become a bottleneck.
    *   **Prediction:** Without performance monitoring data, it's difficult to predict exactly *when* a bottleneck will occur, but proactive scaling is recommended.
    *   **Recommendation:** Implement horizontal scaling to distribute the load across multiple instances. Monitor CPU usage, memory usage, and response times to determine when to scale up or down.


--------------------------------------------------------------------------------

Technical Data Details:
{
  "timestamp": "2025-09-24T02:38:16.481467",
  "timeframe": "24 hours",
  "web_service_logs": [
    "\ud83d\udcac 23:08:07 | WHERE users.email = %(email_1)s",
    "\ud83d\udcac 23:08:07 | FROM users JOIN lamps ON users.user_id = lamps.user_id LEFT OUTER JOIN current_conditions ON lamps.lamp_id = current_conditions.lamp_id",
    "\ud83d\udcac 23:08:07 | [SQL: SELECT users.user_id AS users_user_id, users.username AS users_username, users.password_hash AS users_password_hash, users.email AS users_email, users.location AS users_location, users.theme AS users_theme, users.preferred_output AS users_preferred_output, users.sport_type AS users_sport_type, users.wave_threshold_m AS users_wave_threshold_m, users.wind_threshold_knots AS users_wind_threshold_knots, lamps.lamp_id AS lamps_lamp_id, lamps.user_id AS lamps_user_id, lamps.arduino_id AS lamps_arduino_id, lamps.arduino_ip AS lamps_arduino_ip, lamps.last_updated AS lamps_last_updated, current_conditions.lamp_id AS current_conditions_lamp_id, current_conditions.wave_height_m AS current_conditions_wave_height_m, current_conditions.wave_period_s AS current_conditions_wave_period_s, current_conditions.wind_speed_mps AS current_conditions_wind_speed_mps, current_conditions.wind_direction_deg AS current_conditions_wind_direction_deg, current_conditions.last_updated AS current_conditions_last_updated",
    "\ud83d\udcac 23:08:07 |",
    "\ud83d\udcac 23:08:07 |                                                              ^",
    "\ud83d\udcac 23:08:07 | LINE 1: ...users.preferred_output AS users_preferred_output, users.spor...",
    "\u274c 23:08:07 | ERROR:data_base:Error fetching user lamp data: (psycopg2.errors.UndefinedColumn) column users.sport_type does not exist",
    "\ud83d\udcac 23:08:07 | INFO:data_base:Fetching lamp data for user: shaharisn1@gmail.com",
    "\ud83d\udcac 23:08:07 | 104.23.213.143 - - [23/Sep/2025:23:08:07 +0000] \"GET /login HTTP/1.1\" 302 207 \"-\" \"Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Mobile Safari/537.36\"",
    "\ud83d\udcac 23:08:06 | 162.158.79.152 - - [23/Sep/2025:23:08:06 +0000] \"GET /dashboard HTTP/1.1\" 302 199 \"-\" \"Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Mobile Safari/537.36\"",
    "\u274c 23:08:06 | (Background on this error at: https://sqlalche.me/e/20/f405)",
    "\ud83d\udcac 23:08:06 | [parameters: {'email_1': 'shaharisn1@gmail.com', 'param_1': 1}]",
    "\ud83d\udcac 23:08:06 |  LIMIT %(param_1)s]",
    "\ud83d\udcac 23:08:06 | WHERE users.email = %(email_1)s",
    "\ud83d\udcac 23:08:06 | FROM users JOIN lamps ON users.user_id = lamps.user_id LEFT OUTER JOIN current_conditions ON lamps.lamp_id = current_conditions.lamp_id",
    "\ud83d\udcac 23:08:06 | [SQL: SELECT users.user_id AS users_user_id, users.username AS users_username, users.password_hash AS users_password_hash, users.email AS users_email, users.location AS users_location, users.theme AS users_theme, users.preferred_output AS users_preferred_output, users.sport_type AS users_sport_type, users.wave_threshold_m AS users_wave_threshold_m, users.wind_threshold_knots AS users_wind_threshold_knots, lamps.lamp_id AS lamps_lamp_id, lamps.user_id AS lamps_user_id, lamps.arduino_id AS lamps_arduino_id, lamps.arduino_ip AS lamps_arduino_ip, lamps.last_updated AS lamps_last_updated, current_conditions.lamp_id AS current_conditions_lamp_id, current_conditions.wave_height_m AS current_conditions_wave_height_m, current_conditions.wave_period_s AS current_conditions_wave_period_s, current_conditions.wind_speed_mps AS current_conditions_wind_speed_mps, current_conditions.wind_direction_deg AS current_conditions_wind_direction_deg, current_conditions.last_updated AS current_conditions_last_updated",
    "\ud83d\udcac 23:08:06 |",
    "\ud83d\udcac 23:08:06 |                                                              ^",
    "\ud83d\udcac 23:08:06 | LINE 1: ...users.preferred_output AS users_preferred_output, users.spor...",
    "\u274c 23:08:06 | ERROR:data_base:Error fetching user lamp data: (psycopg2.errors.UndefinedColumn) column users.sport_type does not exist",
    "\ud83d\udcac 23:08:06 | INFO:data_base:Fetching lamp data for user: shaharisn1@gmail.com",
    "\ud83d\udcac 23:08:06 | 104.23.213.60 - - [23/Sep/2025:23:08:06 +0000] \"GET /login HTTP/1.1\" 302 207 \"-\" \"Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Mobile Safari/537.36\"",
    "\ud83d\udcac 23:08:06 | 172.70.153.182 - - [23/Sep/2025:23:08:06 +0000] \"GET /dashboard HTTP/1.1\" 302 199 \"-\" \"Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Mobile Safari/537.36\"",
    "\u274c 23:08:06 | (Background on this error at: https://sqlalche.me/e/20/f405)",
    "\ud83d\udcac 23:08:06 | [parameters: {'email_1': 'shaharisn1@gmail.com', 'param_1': 1}]",
    "\ud83d\udcac 23:08:06 |  LIMIT %(param_1)s]",
    "\ud83d\udcac 23:08:06 | WHERE users.email = %(email_1)s",
    "\ud83d\udcac 23:08:06 | FROM users JOIN lamps ON users.user_id = lamps.user_id LEFT OUTER JOIN current_conditions ON lamps.lamp_id = current_conditions.lamp_id",
    "\ud83d\udcac 23:08:06 | [SQL: SELECT users.user_id AS users_user_id, users.username AS users_username, users.password_hash AS users_password_hash, users.email AS users_email, users.location AS users_location, users.theme AS users_theme, users.preferred_output AS users_preferred_output, users.sport_type AS users_sport_type, users.wave_threshold_m AS users_wave_threshold_m, users.wind_threshold_knots AS users_wind_threshold_knots, lamps.lamp_id AS lamps_lamp_id, lamps.user_id AS lamps_user_id, lamps.arduino_id AS lamps_arduino_id, lamps.arduino_ip AS lamps_arduino_ip, lamps.last_updated AS lamps_last_updated, current_conditions.lamp_id AS current_conditions_lamp_id, current_conditions.wave_height_m AS current_conditions_wave_height_m, current_conditions.wave_period_s AS current_conditions_wave_period_s, current_conditions.wind_speed_mps AS current_conditions_wind_speed_mps, current_conditions.wind_direction_deg AS current_conditions_wind_direction_deg, current_conditions.last_updated AS current_conditions_last_updated",
    "\ud83d\udcac 23:08:06 |",
    "\ud83d\udcac 23:08:06 |                                                              ^",
    "\ud83d\udcac 23:08:06 | LINE 1: ...users.preferred_output AS users_preferred_output, users.spor...",
    "\u274c 23:08:06 | ERROR:data_base:Error fetching user lamp data: (psycopg2.errors.UndefinedColumn) column users.sport_type does not exist",
    "\ud83d\udcac 23:08:06 | INFO:data_base:Fetching lamp data for user: shaharisn1@gmail.com",
    "\ud83d\udcac 23:08:06 | 172.71.195.41 - - [23/Sep/2025:23:08:06 +0000] \"GET /login HTTP/1.1\" 302 207 \"-\" \"Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Mobile Safari/537.36\"",
    "\ud83d\udcac 23:08:06 | 104.23.213.13 - - [23/Sep/2025:23:08:06 +0000] \"GET /dashboard HTTP/1.1\" 302 199 \"-\" \"Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Mobile Safari/537.36\"",
    "\u274c 23:08:06 | (Background on this error at: https://sqlalche.me/e/20/f405)",
    "\ud83d\udcac 23:08:06 | [parameters: {'email_1': 'shaharisn1@gmail.com', 'param_1': 1}]",
    "\ud83d\udcac 23:08:06 |  LIMIT %(param_1)s]",
    "\ud83d\udcac 23:08:06 | WHERE users.email = %(email_1)s",
    "\ud83d\udcac 23:08:06 | FROM users JOIN lamps ON users.user_id = lamps.user_id LEFT OUTER JOIN current_conditions ON lamps.lamp_id = current_conditions.lamp_id",
    "\ud83d\udcac 23:08:06 | [SQL: SELECT users.user_id AS users_user_id, users.username AS users_username, users.password_hash AS users_password_hash, users.email AS users_email, users.location AS users_location, users.theme AS users_theme, users.preferred_output AS users_preferred_output, users.sport_type AS users_sport_type, users.wave_threshold_m AS users_wave_threshold_m, users.wind_threshold_knots AS users_wind_threshold_knots, lamps.lamp_id AS lamps_lamp_id, lamps.user_id AS lamps_user_id, lamps.arduino_id AS lamps_arduino_id, lamps.arduino_ip AS lamps_arduino_ip, lamps.last_updated AS lamps_last_updated, current_conditions.lamp_id AS current_conditions_lamp_id, current_conditions.wave_height_m AS current_conditions_wave_height_m, current_conditions.wave_period_s AS current_conditions_wave_period_s, current_conditions.wind_speed_mps AS current_conditions_wind_speed_mps, current_conditions.wind_direction_deg AS current_conditions_wind_direction_deg, current_conditions.last_updated AS current_conditions_last_updated",
    "\ud83d\udcac 23:08:06 |",
    "\ud83d\udcac 23:08:06 |                                                              ^",
    "\ud83d\udcac 23:08:06 | LINE 1: ...users.preferred_output AS users_preferred_output, users.spor...",
    "\u274c 23:08:06 | ERROR:data_base:Error fetching user lamp data: (psycopg2.errors.UndefinedColumn) column users.sport_type does not exist",
    "\ud83d\udcac 23:08:06 | INFO:data_base:Fetching lamp data for user: shaharisn1@gmail.com",
    "\ud83d\udcac 23:08:05 | 162.158.78.139 - - [23/Sep/2025:23:08:05 +0000] \"GET /login HTTP/1.1\" 302 207 \"-\" \"Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Mobile Safari/537.36\"",
    "\ud83d\udcac 23:08:05 | 104.23.213.82 - - [23/Sep/2025:23:08:05 +0000] \"GET /dashboard HTTP/1.1\" 302 199 \"-\" \"Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Mobile Safari/537.36\"",
    "\u274c 23:08:05 | (Background on this error at: https://sqlalche.me/e/20/f405)"
  ],
  "background_service_logs": [
    "\ud83d\udcac 23:32:08 | 2025-09-23 23:32:08,598 - __main__ - INFO -   Updating lamp 4422 (Arduino 4433)",
    "\ud83d\udcac 23:32:08 | 2025-09-23 23:32:08,598 - __main__ - INFO - \ud83d\udcca Combined data for Hadera, Israel: ['wave_height_m', 'wave_period_s', 'timestamp', 'source_endpoint', 'wind_speed_mps', 'wind_direction_deg', 'location', 'temperature_c', 'humidity_percent']",
    "\ud83d\udcac 23:32:08 | 2025-09-23 23:32:08,598 - __main__ - INFO - \u2705 Got data: ['wind_speed_mps', 'wind_direction_deg', 'location', 'temperature_c', 'humidity_percent', 'timestamp', 'source_endpoint']",
    "\ud83d\udcac 23:32:08 | 2025-09-23 23:32:08,598 - __main__ - INFO - \u2705 Surf data standardized successfully",
    "\ud83d\udcac 23:32:08 | }",
    "\ud83d\udcac 23:32:08 |   \"source_endpoint\": \"http://api.openweathermap.org/data/2.5/weather?q=Hadera&appid=d6ef64df6585b7e88e51c221bbd41c2b\"",
    "\ud83d\udcac 23:32:08 |   \"timestamp\": 1758670328,",
    "\ud83d\udcac 23:32:08 |   \"humidity_percent\": 78,",
    "\ud83d\udcac 23:32:08 |   \"temperature_c\": 24.590000000000032,",
    "\ud83d\udcac 23:32:08 |   \"location\": \"Hadera\",",
    "\ud83d\udcac 23:32:08 |   \"wind_direction_deg\": 252,",
    "\ud83d\udcac 23:32:08 |   \"wind_speed_mps\": 1.37,",
    "\ud83d\udcac 23:32:08 | 2025-09-23 23:32:08,598 - __main__ - INFO - \u2705 Standardized data: {",
    "\ud83d\udcac 23:32:08 | 2025-09-23 23:32:08,598 - __main__ - INFO - \u2705 Found config with 7 field mappings",
    "\ud83d\udcac 23:32:08 | 2025-09-23 23:32:08,598 - __main__ - INFO - \ud83d\udd27 Standardizing data from: http://api.openweathermap.org/data/2.5/weather?q=Hadera&appid=d6ef64df6585b7e88e51c221bbd41c2b",
    "\ud83d\udcac 23:32:08 | 2025-09-23 23:32:08,597 - __main__ - INFO - \u2705 API call successful: 200",
    "\ud83d\udcac 23:31:38 | 2025-09-23 23:31:38,569 - __main__ - INFO - \ud83d\udce4 Using 30s timeout for this API",
    "\ud83d\udcac 23:31:38 | 2025-09-23 23:31:38,568 - __main__ - INFO - \ud83d\udce4 Headers: {'User-Agent': 'SurfLamp-Agent/1.0'}",
    "\ud83d\udcac 23:31:38 | 2025-09-23 23:31:38,568 - __main__ - INFO - \ud83d\udce4 Making API request without authentication (public endpoint)",
    "\ud83d\udcac 23:31:38 | 2025-09-23 23:31:38,568 - __main__ - INFO - \ud83c\udf0a Fetching surf data from: http://api.openweathermap.org/data/2.5/weather?q=Hadera&appid=d6ef64df6585b7e88e51c221bbd41c2b",
    "\ud83d\udcac 23:31:38 | 2025-09-23 23:31:38,568 - __main__ - INFO -   Trying API: http://api.openweathermap.org/data/2.5/weather?q=Hadera&appid=d6ef64df6585b7e88e51c221bbd41c2b (Priority: 2)",
    "\ud83d\udcac 23:31:38 | 2025-09-23 23:31:38,568 - __main__ - INFO - \u2705 Got data: ['wave_height_m', 'wave_period_s', 'timestamp', 'source_endpoint']",
    "\ud83d\udcac 23:31:38 | 2025-09-23 23:31:38,567 - __main__ - INFO - \u2705 Surf data standardized successfully",
    "\ud83d\udcac 23:31:38 | }",
    "\ud83d\udcac 23:31:38 |   \"source_endpoint\": \"https://isramar.ocean.org.il/isramar2009/station/data/Hadera_Hs_Per.json\"",
    "\ud83d\udcac 23:31:38 |   \"timestamp\": 1758670298,",
    "\ud83d\udcac 23:31:38 |   \"wave_period_s\": 4.8,",
    "\ud83d\udcac 23:31:38 |   \"wave_height_m\": 0.49,",
    "\ud83d\udcac 23:31:38 | 2025-09-23 23:31:38,567 - __main__ - INFO - \u2705 Standardized data: {",
    "\ud83d\udcac 23:31:38 | 2025-09-23 23:31:38,567 - __main__ - INFO - \u2705 Found config with 2 field mappings",
    "\ud83d\udcac 23:31:38 | 2025-09-23 23:31:38,567 - __main__ - INFO - \ud83d\udd27 Standardizing data from: https://isramar.ocean.org.il/isramar2009/station/data/Hadera_Hs_Per.json",
    "\ud83d\udcac 23:31:38 | 2025-09-23 23:31:38,566 - __main__ - INFO - \u2705 API call successful: 200",
    "\ud83d\udcac 23:31:07 | 2025-09-23 23:31:07,824 - __main__ - INFO - \ud83d\udce4 Using 15s timeout for this API",
    "\ud83d\udcac 23:31:07 | 2025-09-23 23:31:07,824 - __main__ - INFO - \ud83d\udce4 Headers: {'User-Agent': 'SurfLamp-Agent/1.0'}",
    "\ud83d\udcac 23:31:07 | 2025-09-23 23:31:07,824 - __main__ - INFO - \ud83d\udce4 Making API request without authentication (public endpoint)",
    "\ud83d\udcac 23:31:07 | 2025-09-23 23:31:07,824 - __main__ - INFO - \ud83c\udf0a Fetching surf data from: https://isramar.ocean.org.il/isramar2009/station/data/Hadera_Hs_Per.json",
    "\ud83d\udcac 23:31:07 | 2025-09-23 23:31:07,824 - __main__ - INFO -   Trying API: https://isramar.ocean.org.il/isramar2009/station/data/Hadera_Hs_Per.json (Priority: 1)",
    "\ud83d\udcac 23:31:07 | 2025-09-23 23:31:07,824 - __main__ - INFO -    - Arduino 4321 (Lamp 4321)",
    "\ud83d\udcac 23:31:07 | 2025-09-23 23:31:07,824 - __main__ - INFO -    - Arduino 420 (Lamp 420)",
    "\ud83d\udcac 23:31:07 | 2025-09-23 23:31:07,824 - __main__ - INFO -    - Arduino 12325 (Lamp 65485)",
    "\ud83d\udcac 23:31:07 | 2025-09-23 23:31:07,824 - __main__ - INFO -    - Arduino 1 (Lamp 1)",
    "\ud83d\udcac 23:31:07 | 2025-09-23 23:31:07,824 - __main__ - INFO -    - Arduino 6122 (Lamp 4421)",
    "\ud83d\udcac 23:31:07 | 2025-09-23 23:31:07,824 - __main__ - INFO -    - Arduino 2545 (Lamp 46528)",
    "\ud83d\udcac 23:31:07 | 2025-09-23 23:31:07,823 - __main__ - INFO -    - Arduino 4433 (Lamp 4422)",
    "\ud83d\udcac 23:31:07 | 2025-09-23 23:31:07,823 - __main__ - INFO - \u2705 Found 7 lamps in Hadera, Israel:",
    "\ud83d\udcac 23:31:07 | 2025-09-23 23:31:07,816 - __main__ - INFO - \ud83d\udd0d Getting lamps for location: Hadera, Israel",
    "\ud83d\udcac 23:31:07 | 2025-09-23 23:31:07,816 - __main__ - INFO - Available API sources: 2",
    "\ud83d\udcac 23:31:07 | --- Processing Location: Hadera, Israel ---",
    "\ud83d\udcac 23:31:07 | 2025-09-23 23:31:07,816 - __main__ - INFO -",
    "\u26a0\ufe0f 23:31:07 | 2025-09-23 23:31:07,816 - __main__ - WARNING - \u26a0\ufe0f  No lamps found for location: Netanya, Israel"
  ],
  "service_status": {
    "status": "healthy",
    "details": {
      "type": "web_service",
      "url": "https://final-surf-lamp.onrender.com",
      "instances": "1"
    }
  },
  "recent_deployments": [
    {
      "entry": "[01] \u2753 Deploy Unknown",
      "status": "Unknown",
      "created": "Unknown"
    },
    {
      "entry": "[02] \u2753 Deploy Unknown",
      "status": "Unknown",
      "created": "Unknown"
    },
    {
      "entry": "[03] \u2753 Deploy Unknown",
      "status": "Unknown",
      "created": "Unknown"
    },
    {
      "entry": "[04] \u2753 Deploy Unknown",
      "status": "Unknown",
      "created": "Unknown"
    },
    {
      "entry": "[05] \u2753 Deploy Unknown",
      "status": "Unknown",
      "created": "Unknown"
    }
  ],
  "service_events": [
    {
      "event": "[01] \ud83d\udccb server_restarted"
    },
    {
      "event": "[02] \u2705 deploy_ended"
    },
    {
      "event": "[03] \ud83c\udfd7\ufe0f build_ended"
    },
    {
      "event": "[04] \ud83d\ude80 deploy_started"
    },
    {
      "event": "[05] \ud83d\udd28 build_started"
    },
    {
      "event": "[06] \u2705 deploy_ended"
    },
    {
      "event": "[07] \ud83c\udfd7\ufe0f build_ended"
    },
    {
      "event": "[08] \ud83d\ude80 deploy_started"
    },
    {
      "event": "[09] \ud83d\udd28 build_started"
    },
    {
      "event": "[10] \u2705 deploy_ended"
    }
  ],
  "error_summary": {
    "web_errors": {
      "count": 0,
      "types": [],
      "recent": [
        "\u274c 23:08:08 | (Background on this error at: https://sqlalche.me/e/20/f405)",
        "\u274c 23:08:08 | ERROR:data_base:Error fetching user lamp data: (psycopg2.errors.UndefinedColumn) column users.sport_type does not exist",
        "\u274c 23:08:07 | (Background on this error at: https://sqlalche.me/e/20/f405)",
        "\u274c 23:08:07 | ERROR:data_base:Error fetching user lamp data: (psycopg2.errors.UndefinedColumn) column users.sport_type does not exist",
        "\u274c 23:08:07 | (Background on this error at: https://sqlalche.me/e/20/f405)",
        "\u274c 23:08:07 | ERROR:data_base:Error fetching user lamp data: (psycopg2.errors.UndefinedColumn) column users.sport_type does not exist",
        "\u274c 23:08:06 | (Background on this error at: https://sqlalche.me/e/20/f405)",
        "\u274c 23:08:06 | ERROR:data_base:Error fetching user lamp data: (psycopg2.errors.UndefinedColumn) column users.sport_type does not exist",
        "\u274c 23:08:06 | (Background on this error at: https://sqlalche.me/e/20/f405)",
        "\u274c 23:08:06 | ERROR:data_base:Error fetching user lamp data: (psycopg2.errors.UndefinedColumn) column users.sport_type does not exist",
        "\u274c 23:08:06 | (Background on this error at: https://sqlalche.me/e/20/f405)",
        "\u274c 23:08:06 | ERROR:data_base:Error fetching user lamp data: (psycopg2.errors.UndefinedColumn) column users.sport_type does not exist",
        "\u274c 23:08:05 | (Background on this error at: https://sqlalche.me/e/20/f405)"
      ]
    },
    "background_errors": {
      "count": 0,
      "types": [],
      "recent": [
        "\u26a0\ufe0f 23:31:07 | 2025-09-23 23:31:07,816 - __main__ - WARNING - \u26a0\ufe0f  No lamps found for location: Netanya, Israel"
      ]
    }
  },
  "api_activity": {
    "arduino_requests": {
      "total_requests": 2,
      "unique_devices": [
        "4433"
      ],
      "request_patterns": []
    },
    "error_patterns": {
      "status_codes": {},
      "error_types": []
    }
  },
  "processing_performance": {
    "cycle_times": [],
    "success_rate": 0,
    "avg_duration": 0
  },
  "alert_history": [],
  "system_health_trends": {
    "quiet_hours_active": 0,
    "threshold_alerts": 0,
    "locations": []
  }
}
