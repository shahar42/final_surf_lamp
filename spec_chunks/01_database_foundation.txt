Create files: 
- database/models.py (SQLAlchemy models)
- database/schema.sql (PostgreSQL schema)  
- contracts/tools_contract.py (Tools interface contract)

GENERATE ONLY PYTHON/SQL CODE for these exact database tables:

1. users table: user_id (PK, AUTO_INCREMENT), username (VARCHAR(255) UNIQUE), password_hash (TEXT), email (VARCHAR(255) UNIQUE), location (VARCHAR(255)), theme (VARCHAR(50)), preferred_output (VARCHAR(50))

2. lamps table: lamp_id (PK), user_id (FK to users), arduino_id (INTEGER UNIQUE), arduino_ip (VARCHAR(15)), last_updated (TIMESTAMP)

3. daily_usage table: usage_id (PK, AUTO_INCREMENT), website_url (VARCHAR(255) UNIQUE), last_updated (TIMESTAMP)

4. location_websites table: location (VARCHAR(255) PK), usage_id (FK to daily_usage, UNIQUE)

5. usage_lamps table: usage_id (FK to daily_usage), lamp_id (FK to lamps), api_key (TEXT), http_endpoint (TEXT) - Composite PK (usage_id, lamp_id)

Create SQLAlchemy models with proper relationships and a tools contract defining:
- get_all_lamp_ids() -> List[int]
- get_lamp_details(lamp_id: int) -> dict with arduino_id and websites list
- fetch_website_data(api_key: str, endpoint: str) -> dict  
- send_to_arduino(arduino_id: int, data: dict, output_format: str) -> bool
- update_lamp_timestamp(lamp_id: int) -> bool

Use psycopg2 and SQLAlchemy. Create proper foreign key relationships.