Create file: tools/agent_tools.py

GENERATE ONLY PYTHON CODE implementing the 5 agent tools from contracts/tools_contract.py:

Import the database models and implement these functions:

1. get_all_lamp_ids() -> List[int]
   Query lamps table for all lamp_ids, return list of integers

2. get_lamp_details(lamp_id: int) -> dict
   Join lamps with usage_lamps and daily_usage tables
   Return: {'arduino_id': int, 'arduino_ip': str, 'websites': [{'url': str, 'api_key': str, 'endpoint': str}]}

3. fetch_website_data(api_key: str, endpoint: str) -> dict
   Make HTTP GET request to endpoint with api_key
   Return surf condition data: {
     "wave_height_m": float,
     "wave_period_s": float,
     "wind_speed_mps": float, 
     "wind_deg": int,
     "location": str,
     "timestamp": int
   }

4. send_to_arduino(arduino_id: int, data: dict, output_format: str) -> bool
   HTTP POST formatted surf data to Arduino's local IP address
   Look up Arduino IP address from arduino_id in database
   POST to http://{arduino_ip}/api/update with JSON payload:
   {
     "wave_height_m": float,
     "wave_period_s": float, 
     "wind_speed_mps": float,
     "wind_deg": int,
     "location": str,
     "timestamp": int
   }
   Return True/False for success/failure

5. update_lamp_timestamp(lamp_id: int) -> bool
   Update last_updated timestamp for given lamp_id
   Return True/False for success/failure

Use requests library for HTTP calls, SQLAlchemy for database queries.
Include proper error handling and logging.
Must work with Flask (synchronous, not async).