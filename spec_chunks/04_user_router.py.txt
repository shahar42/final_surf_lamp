Create file: app/api/routers/user_router.py

GENERATE ONLY PYTHON CODE for user registration:

from fastapi import APIRouter, Depends, HTTPException
from pydantic import BaseModel, EmailStr, Field
from shared.contracts import ILampControlService, IInputValidator, ValidationError
from app.dependencies import get_lamp_service, get_input_validator
from typing import Optional, List
import logging

logger = logging.getLogger(__name__)
router = APIRouter()

class UserRegistrationRequest(BaseModel):
    name: str = Field(min_length=1, max_length=100)
    email: EmailStr
    password: str = Field(min_length=8)
    lamp_id: str = Field(min_length=3, max_length=50)
    location_index: int = Field(ge=0, le=4)

class UserRegistrationResponse(BaseModel):
    success: bool
    message: str
    errors: Optional[List[str]] = None

@router.post("/register", response_model=UserRegistrationResponse)
async def register_user(
    request: UserRegistrationRequest,
    lamp_service: ILampControlService = Depends(get_lamp_service),
    validator: IInputValidator = Depends(get_input_validator)
):
    '''Register new user and lamp'''
    try:
        # Validate inputs
        is_valid_email = await validator.validate_email(request.email)
        is_valid_lamp = await validator.validate_lamp_id(request.lamp_id)
        is_valid_location = await validator.validate_location_index(request.location_index)
        
        if not all([is_valid_email, is_valid_lamp, is_valid_location]):
            return UserRegistrationResponse(
                success=False,
                message="Validation failed",
                errors=["Invalid input data"]
            )
        
        # Process registration
        result = await lamp_service.process_user_registration(request.dict())
        
        return UserRegistrationResponse(
            success=result.get("success", False),
            message=result.get("message", "Registration processed"),
            errors=result.get("errors")
        )
        
    except ValidationError as e:
        raise HTTPException(status_code=400, detail=str(e))
    except Exception as e:
        logger.error(f"Registration error: {e}")
        raise HTTPException(status_code=500, detail="Registration failed")