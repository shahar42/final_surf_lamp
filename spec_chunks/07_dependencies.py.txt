Create file: app/dependencies.py

GENERATE ONLY PYTHON CODE for dependency injection:

from shared.contracts import ILampControlService, IInputValidator
from typing import Optional
import os

# Cached instances
_lamp_service: Optional[ILampControlService] = None
_input_validator: Optional[IInputValidator] = None

def get_lamp_service() -> ILampControlService:
    '''Get or create lamp control service'''
    global _lamp_service
    if _lamp_service is None:
        # Import implementations
        from app.business_logic.services.lamp_control_service import LampControlService
        from app.data_layer.repositories.lamp_repository import PostgresLampRepository
        from app.data_layer.cache.cache_manager import RedisCacheManager
        from app.infrastructure.external.surf_data_provider import MultiProviderSurfDataService
        from app.data_layer.repositories.activity_logger import PostgresActivityLogger
        from app.infrastructure.security.password_security import BCryptPasswordSecurity
        from app.infrastructure.security.input_validator import SecurityInputValidator
        
        # Initialize dependencies
        lamp_repo = PostgresLampRepository()
        cache_manager = RedisCacheManager()
        surf_provider = MultiProviderSurfDataService()
        activity_logger = PostgresActivityLogger()
        password_security = BCryptPasswordSecurity()
        validator = SecurityInputValidator()
        
        # Create service
        _lamp_service = LampControlService(
            lamp_repo=lamp_repo,
            surf_provider=surf_provider,
            cache_manager=cache_manager,
            activity_logger=activity_logger,
            password_security=password_security,
            validator=validator
        )
    
    return _lamp_service

def get_input_validator() -> IInputValidator:
    '''Get or create input validator'''
    global _input_validator
    if _input_validator is None:
        from app.infrastructure.security.input_validator import SecurityInputValidator
        _input_validator = SecurityInputValidator()
    return _input_validator

def get_database_url() -> str:
    '''Get database URL from environment'''
    return os.getenv("DATABASE_URL", "postgresql://user:pass@localhost/surflamp")

def get_redis_url() -> str:
    '''Get Redis URL from environment'''
    return os.getenv("REDIS_URL", "redis://localhost:6379")